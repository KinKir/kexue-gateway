# ------------------------------
# 以下为网络配置，将影响内核或系统配置
# ------------------------------

# 是否完全禁用 IPv6。
disable_all_ipv6: true
# 网关自身 DNS 服务器。
local_dns_server: 114.114.114.114
# 上游网关 IP 地址。可不填，将尝试从默认路由中解析。
local_gateway_ip: ""
# 是否开启 DNS 劫持。开启后，DNS 查询请求（目标端口为 53 的 UDP 流量）将会被强制重定向至网关的 DNS 服务。
# 可在客户端无法修改 DNS 服务器时使用（例如 Chromecast）。
# 若客户端 DNS 服务器处于同一子网，通常该选项无效，流量会直达同一子网内的目标而不经过网关。
dns_hijacking: false
# SO_MARK 设置。用于 iptables 甄别流量来源，一般无需修改。
so_mark_direct: 255
so_mark_forward: 254
# 保留 IP 地址（段）。目标 IP 属于这些 IP 段的流量将不会进入 V2ray，而是直接由 iptables RETURN。
reversed_ips:
  - 0.0.0.0/8
  - 10.0.0.0/8
  - 127.0.0.0/8
  - 169.254.0.0/16
  - 172.16.0.0/12
  - 192.168.0.0/16
  - 224.0.0.0/4
  - 240.0.0.0/4
  - 255.255.255.255

# ---------------------------------------
# 以下为 V2ray 配置，详情可参考 V2ray 官方文档
# ---------------------------------------

# V2ray 发行包路径。可在 https://github.com/v2ray/v2ray-core/releases 下载。
v2ray_archive: dist/v2ray-linux-arm64.zip
# V2ray 安装路径。
v2ray_install_path: /usr/local/v2ray

# 多路复用数量。可指定单条 TCP 连接实际承载的连接数，若等于 0，则关闭多路复用。
mux_concurrency: 0
# 是否启用防污染 DNS。当关闭时，不会停止 53 端口的服务，而是将全部 DNS 查询直接转发至 114.114.114.114。
dns_enabled: "{{ forward_mode == 'vmess' }}"
# 是否开启嗅探。当启用时，将监测 HTTP 和 TLS（HTTPS）流量的目标域名，可在无法指定客户端 DNS 时使用，可避免部分 DNS 污染。
sniffing_enabled: "{{ not dns_enabled }}"

# 访问日志路径。
log_access: /dev/null
# 错误日志路径。
log_error: /var/log/v2ray.log
# 日志等级。可选值请参考 V2ray 文档。
log_level: warning

# API 监听地址。
api_listen: 127.0.0.1
# API 监听端口。
api_port: 8080

# DNS 服务静态映射配置。该列表项的名和值分别对应域名与 IP 地址。
# 支持子域名或正则匹配等，详见：https://www.v2ray.com/chapter_02/04_dns.html#dnsobject。
dns_hosts:
  # 例如，将 kexue-gateway.lan 解析为网关自身 IP 地址。
  kexue-gateway.lan: "{{ ansible_default_ipv4.address }}"
  # 例如，将常见广告域名解析到 127.0.0.1，以达到屏蔽部分广告的作用。
  # geosite:category-ads: 127.0.0.1

# --------------------------------------
# 以下为健康检查配置，依赖于 healthchecks.io
# --------------------------------------

# healthchecks.io 提供的 UUID。当不为空字符串时，将会启用健康检查上报。
healthchecks_uuid: ""
# 健康检查命令组。可配置多条命令，将会按顺序执行。
# 当其中任意命令的退出代码非零时，后续命令不再继续执行。
# 若退出代码均为零，则认为健康（OK）；否则认为故障（Failure）。
# STDOUT 的输出将会被上报到 healthchecks.io。
# STDERR 的输出将会被记录到 /var/log/healthcheck.log。
healthcheck_commands:
  - 'curl -4fsS -m 3 --retry 3 -x socks5h://127.0.0.1:{{ socks_forward_port }} -D - -w "Remote IP: %{remote_ip}\nResponse time: %{time_total}s\n" http://www.gstatic.com/generate_204'
  - 'cat /etc/armbianmonitor/datasources/soctemp | awk "{ printf(\"CPU temperature: %0.1f°C\n\", \$1/1000); }"'
  - 'echo "System uptime: $(uptime)"'

# ------------
# 以下为统计配置
# ------------

# 每日几时收集统计数据。例如，设置为 8，则每天八点执行统计；设置为 -1 表示禁用统计。
stats_collect_at: -1
# 用于存储统计数据的目录。可不必存在，将尝试自动创建。
stats_storage: /var/log/stats
# 统计数据收集成功后执行的脚本。支持多行，可用于上报至 Slack 等；包含当日统计数据的文件路径可通过 $STATS 变量访问。
stats_after_script:

# -----------------
# 以下为 DNSMASQ 配置
# -----------------

dnsmasq_enabled: false
dhcp_range: 192.168.0.50,192.168.0.150,255.255.255.0,1h
